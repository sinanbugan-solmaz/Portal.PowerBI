@page "/UserPanel"


@attribute [Authorize(Roles = "Admin")]

<div class="container">

    <EditForm Model="@userCreated" OnValidSubmit="UsersProcess">
        <DataAnnotationsValidator />
        <div class="form-card">
            <div>
                <span style="display: block; font-size: 12px; text-align: center; color: #4a0505;">@IsSuccess </span>
            </div>
            <h6>User Create </h6>
            <hr />
            <div class="row">
                <div class="col-6">
                    <label>UserName</label>
                    <input @bind-value="userCreated.UserName" class="form-input-style" type="text" />
                </div>
                <div class="col-6">
                    <label>Email</label>
                    <input @bind-value="userCreated.Email" class="form-input-style" type="text" />
                </div>
                <div class="col-6">
                    <label>Password</label>
                    <input @bind-value="userCreated.Password" class="form-input-style" type="text" />
                </div>
                <div class="col-6">
                    <label>User-Role</label>
 

                <InputSelect class="form-input-style" @bind-Value="userCreated.RoleId">
                    
                    @foreach (var cnt in roles)
                    {
                         <option value="@cnt.Id">@cnt.RoleName</option>
                    }
                </InputSelect>
                </div>
            </div>
            <div class="button-loc">
                <button type="submit" class="btn btn-info">Ekle</button>
            </div>

        </div>
    </EditForm>
</div>

@code {
    [Inject]
    HttpClient client { get; set; }

    [Inject]
    NavigationManager navigationManager { get; set; }

    UserCreatedRequestDTO userCreated = new UserCreatedRequestDTO();

    ComponentCreatedRequestDTO componentCreated = new ComponentCreatedRequestDTO();

    List<Roles> roles = new List<Roles>();

    public string IsSuccess = "";

    protected async override Task OnInitializedAsync()
    {
        var httpreq = await client.GetAsync("api/User/Roles");
        if (httpreq.IsSuccessStatusCode)
        {
            roles = await httpreq.Content.ReadFromJsonAsync<List<Roles>>();
        }


    }

    public async Task UsersProcess()
    {
        var httpreqresp = await client.PostAsJsonAsync("api/User/UserCreate", userCreated);
        if (httpreqresp.IsSuccessStatusCode)
        {
            try
            {
                var resp = await httpreqresp.Content.ReadFromJsonAsync<ServiceResponse<UserAndRoleMappingResponse>>();

                if (resp.Success)
                {
                    IsSuccess = resp.Message;
                    navigationManager.NavigateTo("/UserPanel");
                }
                else
                {
                    IsSuccess = resp.Message;
                }
            }
            catch (Exception ex)
            {

                IsSuccess = ex.Message;
            }


        }



    }



}
